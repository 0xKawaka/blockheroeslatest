/* Autogenerated file. Do not edit manually. */

import { defineComponent, Type as RecsType, World } from "@dojoengine/recs";

export type ContractComponents = Awaited<ReturnType<typeof defineContractComponents>>;

export function defineContractComponents(world: World) {
  return {
    Account: (() => {
      return defineComponent(
        world,
        { owner: RecsType.BigInt, username: RecsType.BigInt, energy: RecsType.Number, pvpEnergy: RecsType.Number, crystals: RecsType.Number, gems: RecsType.Number, lastEnergyUpdateTimestamp: RecsType.BigInt, lastPvpEnergyUpdateTimestamp: RecsType.BigInt, runesCount: RecsType.Number, heroesCount: RecsType.Number, summonChests: RecsType.Number },
        {
          metadata: {
            namespace: "game",
            name: "Account",
            types: ["contractaddress","felt252","u16","u16","u32","u32","u64","u64","u32","u32","u32"],
            customTypes: [],
          },
        }
      );
    })(),
    AccountQuests: (() => {
      return defineComponent(
        world,
        { owner: RecsType.BigInt, map: RecsType.Number, mapProgressRequired: RecsType.Number, hasClaimedRewards: RecsType.Boolean },
        {
          metadata: {
            namespace: "game",
            name: "AccountQuests",
            types: ["contractaddress","u16","u16","bool"],
            customTypes: [],
          },
        }
      );
    })(),
    ArenaAccount: (() => {
      return defineComponent(
        world,
        { owner: RecsType.BigInt, rank: RecsType.BigInt, lastClaimedRewards: RecsType.BigInt, teamSize: RecsType.Number },
        {
          metadata: {
            namespace: "game",
            name: "ArenaAccount",
            types: ["contractaddress","u64","u64","u32"],
            customTypes: [],
          },
        }
      );
    })(),
    ArenaBattleStorage: (() => {
      return defineComponent(
        world,
        { owner: RecsType.BigInt, enemyOwner: RecsType.BigInt },
        {
          metadata: {
            namespace: "game",
            name: "ArenaBattleStorage",
            types: ["contractaddress","contractaddress"],
            customTypes: [],
          },
        }
      );
    })(),
    ArenaConfig: (() => {
      return defineComponent(
        world,
        { id: RecsType.Number, enemyRangesByRankLength: RecsType.Number, gemsRewardsLength: RecsType.Number },
        {
          metadata: {
            namespace: "game",
            name: "ArenaConfig",
            types: ["u8","u32","u32"],
            customTypes: [],
          },
        }
      );
    })(),
    ArenaCurrentRankIndex: (() => {
      return defineComponent(
        world,
        { id: RecsType.Number, currentRankIndex: RecsType.BigInt },
        {
          metadata: {
            namespace: "game",
            name: "ArenaCurrentRankIndex",
            types: ["u8","u64"],
            customTypes: [],
          },
        }
      );
    })(),
    ArenaTeam: (() => {
      return defineComponent(
        world,
        { owner: RecsType.BigInt, index: RecsType.Number, heroIndex: RecsType.Number },
        {
          metadata: {
            namespace: "game",
            name: "ArenaTeam",
            types: ["contractaddress","u32","u32"],
            customTypes: [],
          },
        }
      );
    })(),
    BaseHero: (() => {
      return defineComponent(
        world,
        { heroName: RecsType.BigInt, rank: RecsType.Number, statistics: { health: RecsType.BigInt, attack: RecsType.BigInt, defense: RecsType.BigInt, speed: RecsType.BigInt, criticalRate: RecsType.BigInt, criticalDamage: RecsType.BigInt }, skillsCount: RecsType.Number },
        {
          metadata: {
            namespace: "game",
            name: "BaseHero",
            types: ["felt252","u16","u64","u64","u64","u64","u64","u64","u8"],
            customTypes: ["Statistics"],
          },
        }
      );
    })(),
    BattleStorage: (() => {
      return defineComponent(
        world,
        { owner: RecsType.BigInt, map: RecsType.Number, level: RecsType.Number, entitiesCount: RecsType.Number, aliveEntitiesCount: RecsType.Number, isBattleOver: RecsType.Boolean, isWaitingForPlayerAction: RecsType.Boolean },
        {
          metadata: {
            namespace: "game",
            name: "BattleStorage",
            types: ["contractaddress","u16","u16","u32","u32","bool","bool"],
            customTypes: [],
          },
        }
      );
    })(),
    BonusRuneStatistics: (() => {
      return defineComponent(
        world,
        { statistic: RecsType.Number, rarity: RecsType.Number, isPercent: RecsType.Boolean, value: RecsType.Number },
        {
          metadata: {
            namespace: "game",
            name: "BonusRuneStatistics",
            types: ["enum","enum","bool","u32"],
            customTypes: ["RuneStatistic","RuneRarity"],
          },
        }
      );
    })(),
    Config: (() => {
      return defineComponent(
        world,
        { key: RecsType.Number, value: RecsType.BigInt },
        {
          metadata: {
            namespace: "game",
            name: "Config",
            types: ["enum","u64"],
            customTypes: ["ConfigType"],
          },
        }
      );
    })(),
    EnemyRanges: (() => {
      return defineComponent(
        world,
        { index: RecsType.Number, minRank: RecsType.BigInt, range: RecsType.BigInt },
        {
          metadata: {
            namespace: "game",
            name: "EnemyRanges",
            types: ["u32","u64","u64"],
            customTypes: [],
          },
        }
      );
    })(),
    EntityStorage: (() => {
      return defineComponent(
        world,
        { owner: RecsType.BigInt, map: RecsType.Number, entityIndex: RecsType.Number, entityVal: { index: RecsType.Number, heroId: RecsType.Number, name: RecsType.BigInt, turnBar: { entityIndex: RecsType.Number, speed: RecsType.BigInt, turnbar: RecsType.BigInt, incrementStep: RecsType.BigInt, decimals: RecsType.BigInt }, statistics: { maxHealth: RecsType.BigInt, health: RecsType.String, attack: { value: RecsType.BigInt, malus: { value: RecsType.BigInt, duration: RecsType.Number }, bonus: { value: RecsType.BigInt, duration: RecsType.Number } }, defense: { value: RecsType.BigInt, malus: { value: RecsType.BigInt, duration: RecsType.Number }, bonus: { value: RecsType.BigInt, duration: RecsType.Number } }, speed: { value: RecsType.BigInt, malus: { value: RecsType.BigInt, duration: RecsType.Number }, bonus: { value: RecsType.BigInt, duration: RecsType.Number } }, criticalChance: { value: RecsType.BigInt, malus: { value: RecsType.BigInt, duration: RecsType.Number }, bonus: { value: RecsType.BigInt, duration: RecsType.Number } }, criticalDamage: { value: RecsType.BigInt, malus: { value: RecsType.BigInt, duration: RecsType.Number }, bonus: { value: RecsType.BigInt, duration: RecsType.Number } } }, cooldowns: { skill1: RecsType.Number, skill2: RecsType.Number }, stunOnTurnProc: { duration: RecsType.Number, stunned: RecsType.Boolean }, allyOrEnemy: RecsType.Number }, healthOnTurnProcCount: RecsType.Number },
        {
          metadata: {
            namespace: "game",
            name: "EntityStorage",
            types: ["contractaddress","u16","u32","u32","u32","felt252","u32","u64","u64","u64","u64","u64","i64","u64","u64","u8","u64","u8","u64","u64","u8","u64","u8","u64","u64","u8","u64","u8","u64","u64","u8","u64","u8","u64","u64","u8","u64","u8","u8","u8","u8","bool","enum","u32"],
            customTypes: ["Entity","TurnBar","BattleStatistics","BattleStatistic","StatModifier","StatModifier","BattleStatistic","StatModifier","StatModifier","BattleStatistic","StatModifier","StatModifier","BattleStatistic","StatModifier","StatModifier","BattleStatistic","StatModifier","StatModifier","Cooldowns","StunOnTurnProc","AllyOrEnemy"],
          },
        }
      );
    })(),
    GemsRewards: (() => {
      return defineComponent(
        world,
        { index: RecsType.Number, minRank: RecsType.BigInt, gems: RecsType.BigInt },
        {
          metadata: {
            namespace: "game",
            name: "GemsRewards",
            types: ["u32","u64","u64"],
            customTypes: [],
          },
        }
      );
    })(),
    GlobalQuests: (() => {
      return defineComponent(
        world,
        { map: RecsType.Number, mapProgressRequired: RecsType.Number, rewardType: RecsType.Number, rewardQuantity: RecsType.Number },
        {
          metadata: {
            namespace: "game",
            name: "GlobalQuests",
            types: ["u16","u16","enum","u32"],
            customTypes: ["RewardType"],
          },
        }
      );
    })(),
    HealthOnTurnProcStorage: (() => {
      return defineComponent(
        world,
        { owner: RecsType.BigInt, map: RecsType.Number, entityIndex: RecsType.Number, index: RecsType.Number, healthOnTurnProc: { entityIndex: RecsType.Number, value: RecsType.BigInt, duration: RecsType.Number, damageOrHeal: RecsType.Number } },
        {
          metadata: {
            namespace: "game",
            name: "HealthOnTurnProcStorage",
            types: ["contractaddress","u16","u32","u32","u32","u64","u8","enum"],
            customTypes: ["HealthOnTurnProc","DamageOrHealEnum"],
          },
        }
      );
    })(),
    Heroes: (() => {
      return defineComponent(
        world,
        { owner: RecsType.BigInt, index: RecsType.Number, hero: { id: RecsType.Number, name: RecsType.BigInt, level: RecsType.Number, rank: RecsType.Number, experience: RecsType.Number, runes: { isFirstRuneEquipped: RecsType.Boolean, first: RecsType.Number, isSecondRuneEquipped: RecsType.Boolean, second: RecsType.Number, isThirdRuneEquipped: RecsType.Boolean, third: RecsType.Number, isFourthRuneEquipped: RecsType.Boolean, fourth: RecsType.Number, isFifthRuneEquipped: RecsType.Boolean, fifth: RecsType.Number, isSixthRuneEquipped: RecsType.Boolean, sixth: RecsType.Number } } },
        {
          metadata: {
            namespace: "game",
            name: "Heroes",
            types: ["contractaddress","u32","u32","felt252","u16","u16","u32","bool","u32","bool","u32","bool","u32","bool","u32","bool","u32","bool","u32"],
            customTypes: ["Hero","EquippedRunes"],
          },
        }
      );
    })(),
    HeroesByRank: (() => {
      return defineComponent(
        world,
        { rank: RecsType.Number, heroes: RecsType.StringArray },
        {
          metadata: {
            namespace: "game",
            name: "HeroesByRank",
            types: ["u16"],
            customTypes: [],
          },
        }
      );
    })(),
    LevelEnemy: (() => {
      return defineComponent(
        world,
        { map: RecsType.Number, level: RecsType.Number, index: RecsType.Number, hero: { id: RecsType.Number, name: RecsType.BigInt, level: RecsType.Number, rank: RecsType.Number, experience: RecsType.Number, runes: { isFirstRuneEquipped: RecsType.Boolean, first: RecsType.Number, isSecondRuneEquipped: RecsType.Boolean, second: RecsType.Number, isThirdRuneEquipped: RecsType.Boolean, third: RecsType.Number, isFourthRuneEquipped: RecsType.Boolean, fourth: RecsType.Number, isFifthRuneEquipped: RecsType.Boolean, fifth: RecsType.Number, isSixthRuneEquipped: RecsType.Boolean, sixth: RecsType.Number } } },
        {
          metadata: {
            namespace: "game",
            name: "LevelEnemy",
            types: ["u16","u16","u16","u32","felt252","u16","u16","u32","bool","u32","bool","u32","bool","u32","bool","u32","bool","u32","bool","u32"],
            customTypes: ["Hero","EquippedRunes"],
          },
        }
      );
    })(),
    LevelInfos: (() => {
      return defineComponent(
        world,
        { map: RecsType.Number, level: RecsType.Number, energyCost: RecsType.Number, enemiesCount: RecsType.Number },
        {
          metadata: {
            namespace: "game",
            name: "LevelInfos",
            types: ["u16","u16","u16","u16"],
            customTypes: [],
          },
        }
      );
    })(),
    MapProgress: (() => {
      return defineComponent(
        world,
        { owner: RecsType.BigInt, map: RecsType.Number, level: RecsType.Number },
        {
          metadata: {
            namespace: "game",
            name: "MapProgress",
            types: ["contractaddress","u16","u16"],
            customTypes: [],
          },
        }
      );
    })(),
    RuneStatistics: (() => {
      return defineComponent(
        world,
        { statistic: RecsType.Number, rarity: RecsType.Number, isPercent: RecsType.Boolean, value: RecsType.Number },
        {
          metadata: {
            namespace: "game",
            name: "RuneStatistics",
            types: ["enum","enum","bool","u32"],
            customTypes: ["RuneStatistic","RuneRarity"],
          },
        }
      );
    })(),
    Runes: (() => {
      return defineComponent(
        world,
        { owner: RecsType.BigInt, index: RecsType.Number, rune: { id: RecsType.Number, statistic: RecsType.Number, isPercent: RecsType.Boolean, rank: RecsType.Number, rarity: RecsType.Number, runeType: RecsType.Number, isEquipped: RecsType.Boolean, heroEquipped: RecsType.Number, rank4Bonus: { statistic: RecsType.Number, isPercent: RecsType.Boolean }, rank8Bonus: { statistic: RecsType.Number, isPercent: RecsType.Boolean }, rank12Bonus: { statistic: RecsType.Number, isPercent: RecsType.Boolean }, rank16Bonus: { statistic: RecsType.Number, isPercent: RecsType.Boolean } } },
        {
          metadata: {
            namespace: "game",
            name: "Runes",
            types: ["contractaddress","u32","u32","enum","bool","u32","enum","enum","bool","u32","enum","bool","enum","bool","enum","bool","enum","bool"],
            customTypes: ["Rune","RuneStatistic","RuneRarity","RuneType","RuneBonus","RuneStatistic","RuneBonus","RuneStatistic","RuneBonus","RuneStatistic","RuneBonus","RuneStatistic"],
          },
        }
      );
    })(),
    SkillBuff: (() => {
      return defineComponent(
        world,
        { skillName: RecsType.BigInt, index: RecsType.Number, buff: { buffType: RecsType.Number, value: RecsType.BigInt, duration: RecsType.Number, target: RecsType.Boolean, aoe: RecsType.Boolean, self: RecsType.Boolean } },
        {
          metadata: {
            namespace: "game",
            name: "SkillBuff",
            types: ["felt252","u16","enum","u64","u8","bool","bool","bool"],
            customTypes: ["Buff","BuffType"],
          },
        }
      );
    })(),
    SkillInfos: (() => {
      return defineComponent(
        world,
        { name: RecsType.BigInt, cooldown: RecsType.Number, damage: { value: RecsType.BigInt, target: RecsType.Boolean, aoe: RecsType.Boolean, self: RecsType.Boolean, damageType: RecsType.Number }, heal: { value: RecsType.BigInt, target: RecsType.Boolean, aoe: RecsType.Boolean, self: RecsType.Boolean, healType: RecsType.Number }, targetType: RecsType.Number, accuracy: RecsType.Number, buffsCount: RecsType.Number },
        {
          metadata: {
            namespace: "game",
            name: "SkillInfos",
            types: ["felt252","u8","u64","bool","bool","bool","enum","u64","bool","bool","bool","enum","enum","u16","u16"],
            customTypes: ["Damage","DamageType","Heal","HealType","TargetType"],
          },
        }
      );
    })(),
    SkillNameSet: (() => {
      return defineComponent(
        world,
        { heroName: RecsType.BigInt, index: RecsType.Number, skill: RecsType.BigInt },
        {
          metadata: {
            namespace: "game",
            name: "SkillNameSet",
            types: ["felt252","u8","felt252"],
            customTypes: [],
          },
        }
      );
    })(),
    SummonRates: (() => {
      return defineComponent(
        world,
        { key: RecsType.Number, rates: RecsType.StringArray },
        {
          metadata: {
            namespace: "game",
            name: "SummonRates",
            types: ["u16"],
            customTypes: [],
          },
        }
      );
    })(),
    TurnTimelineStorage: (() => {
      return defineComponent(
        world,
        { owner: RecsType.BigInt, map: RecsType.Number, index: RecsType.Number, entityIndex: RecsType.Number },
        {
          metadata: {
            namespace: "game",
            name: "TurnTimelineStorage",
            types: ["contractaddress","u16","u16","u16"],
            customTypes: [],
          },
        }
      );
    })(),
    Usernames: (() => {
      return defineComponent(
        world,
        { username: RecsType.BigInt, owner: RecsType.BigInt },
        {
          metadata: {
            namespace: "game",
            name: "Usernames",
            types: ["felt252","contractaddress"],
            customTypes: [],
          },
        }
      );
    })(),
  };
}
